package com.mcalzada.service;

import com.google.gson.internal.LinkedTreeMap;
import com.mcalzada.controllers.exception.ApiException;
import com.mcalzada.model.CollaboratorResponse;
import com.mcalzada.model.entity.Collaborator;
import com.mcalzada.model.entity.Comic;
import com.mcalzada.repository.CollaboratorRepository;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * CollaboratorService is a JEE Bean built over the service layer for the application. Performs domain operations within the controller, gateway and
 * repositories
 *
 * @author Marco Calzada
 * @version 1.0
 */
@Service
public class CollaboratorService
{

    private final CollaboratorRepository collaboratorRepository;
    private final ComicService comicService;

    /**
     * Service constructor autogenerated by springboot context
     *
     * @param collaboratorRepository repository used to perform data-gather operations
     * @param comicService           {@link ComicService} provided for performing comic operations
     */
    @Autowired
    public CollaboratorService(CollaboratorRepository collaboratorRepository, ComicService comicService)
    {
        this.collaboratorRepository = collaboratorRepository;
        this.comicService = comicService;
    }

    /**
     * This method search a hero by its name inside the {@link ComicService} and links it to the collaborators that participated in those comics.
     *
     * @param name of the requested hero
     * @return {@link CollaboratorResponse} needed by a controller
     * @throws ApiException if provided data is wrong or couldn't find anything related to the provided hero
     */
    public CollaboratorResponse findCollaboratorByHero(String name) throws ApiException
    {
        List<Comic> comics = comicService.searchComicsByCharacterName(name);
        if (comics.isEmpty())
        {
            throw new ApiException(404, "Comics not found for requested character name");
        }
        List<Collaborator> collaborators = collaboratorRepository.findDistinctNameByComicsIn(comics);

        LinkedTreeMap<String, List<String>> collaboratorsPerRoles = new LinkedTreeMap<>();

        for (Collaborator collaborator : collaborators)
        {
            List<String> groupedCollab = collaboratorsPerRoles.getOrDefault(collaborator.getRole(), new ArrayList<>());
            groupedCollab.add(collaborator.getName());
            collaboratorsPerRoles.put(collaborator.getRole(), groupedCollab);
        }

        return CollaboratorResponse.builder()
              .lastSync(collaborators.stream().findAny().orElse(Collaborator.builder().updatedAt(LocalDateTime.now()).build()).getUpdatedAt())
              .colorist(collaboratorsPerRoles.get("colorist"))
              .editors(collaboratorsPerRoles.get("editor"))
              .writers(collaboratorsPerRoles.get("writer"))
              .build();
    }

    /**
     * Creates the provided collaborators over the configured repository
     *
     * @param collaborators requested to be created
     */
    public void createCollaborators(List<Collaborator> collaborators)
    {
        collaboratorRepository.saveAll(collaborators);
    }
}
